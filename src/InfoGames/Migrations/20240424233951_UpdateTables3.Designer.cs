// <auto-generated />
using System;
using InfoGames.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfoGames.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240424233951_UpdateTables3")]
    partial class UpdateTables3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InfoGames.Models.DetalhesJogo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutTheGame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackgroundRaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapsuleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapsuleImagev5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Developers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dlc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("LegalNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Packages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publishers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendationsTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedLanguages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdJogo")
                        .IsUnique();

                    b.ToTable("DetalhesJogos");
                });

            modelBuilder.Entity("InfoGames.Models.Jogo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LojaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("InfoGames.Models.JogoCompleto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullGameAppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDetalhesJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDetalhesJogo")
                        .IsUnique();

                    b.ToTable("JogosCompletos");
                });

            modelBuilder.Entity("InfoGames.Models.Loja", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChaveApi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lojas");

                    b.HasData(
                        new
                        {
                            Id = "1d5f4004-1ff0-4714-8d7f-257a70916dac",
                            ChaveApi = "123456",
                            Logo = "https://upload.wikimedia.org/wikipedia/commons/8/83/Steam_icon_logo.svg",
                            Nome = "Steam",
                            Url = "https://store.steampowered.com/"
                        });
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoLinux", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDetalhesJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDetalhesJogo")
                        .IsUnique();

                    b.ToTable("RequisitosLinux");
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoMac", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDetalhesJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDetalhesJogo")
                        .IsUnique();

                    b.ToTable("RequisitosMac");
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoPC", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDetalhesJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDetalhesJogo")
                        .IsUnique();

                    b.ToTable("RequisitosPC");
                });

            modelBuilder.Entity("InfoGames.Models.DetalhesJogo", b =>
                {
                    b.HasOne("InfoGames.Models.Jogo", "Jogo")
                        .WithOne("DetalhesJogo")
                        .HasForeignKey("InfoGames.Models.DetalhesJogo", "IdJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogo");
                });

            modelBuilder.Entity("InfoGames.Models.Jogo", b =>
                {
                    b.HasOne("InfoGames.Models.Loja", "Loja")
                        .WithMany("Jogos")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("InfoGames.Models.JogoCompleto", b =>
                {
                    b.HasOne("InfoGames.Models.DetalhesJogo", "DetalhesJogo")
                        .WithOne("JogoCompleto")
                        .HasForeignKey("InfoGames.Models.JogoCompleto", "IdDetalhesJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalhesJogo");
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoLinux", b =>
                {
                    b.HasOne("InfoGames.Models.DetalhesJogo", "DetalhesJogo")
                        .WithOne("RequisitoLinux")
                        .HasForeignKey("InfoGames.Models.RequisitoLinux", "IdDetalhesJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalhesJogo");
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoMac", b =>
                {
                    b.HasOne("InfoGames.Models.DetalhesJogo", "DetalhesJogo")
                        .WithOne("RequisitoMac")
                        .HasForeignKey("InfoGames.Models.RequisitoMac", "IdDetalhesJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalhesJogo");
                });

            modelBuilder.Entity("InfoGames.Models.RequisitoPC", b =>
                {
                    b.HasOne("InfoGames.Models.DetalhesJogo", "DetalhesJogo")
                        .WithOne("RequisitoPC")
                        .HasForeignKey("InfoGames.Models.RequisitoPC", "IdDetalhesJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalhesJogo");
                });

            modelBuilder.Entity("InfoGames.Models.DetalhesJogo", b =>
                {
                    b.Navigation("JogoCompleto");

                    b.Navigation("RequisitoLinux");

                    b.Navigation("RequisitoMac");

                    b.Navigation("RequisitoPC");
                });

            modelBuilder.Entity("InfoGames.Models.Jogo", b =>
                {
                    b.Navigation("DetalhesJogo");
                });

            modelBuilder.Entity("InfoGames.Models.Loja", b =>
                {
                    b.Navigation("Jogos");
                });
#pragma warning restore 612, 618
        }
    }
}
